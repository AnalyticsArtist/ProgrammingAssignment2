library(lattice)
library(nutshell)
## Install packages from CRAN; use any USA mirror
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
install.packages("nutshell")
library(lattice)
library(nutshell)
library(lattice)
library(nutshell)
install.packages("nutshell")
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK, MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
## Remove unknowns
dob.dm.tbl=dob.dm.tbl[,-2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
+ xlab="Day of Week",col="black")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE, xlab="Day of Week",col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5),
+ col="black")
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
histogram(~DBWT|DMETH_REC,data=births2006.smpl,layout=c(1,3), col="black")
## Birth weight by number of babies born
histogram(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), col="black")
densityplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
densityplot(~DBWT,groups=DPLURAL,data=births2006.smpl, plot.points=FALSE)
dotplot(~DBWT|DPLURAL,data=births2006.smpl,layout=c(1,5), plot.points=FALSE,col="black")
xyplot(DBWT~DOB_WK,data=births2006.smpl,col="black")
xyplot(DBWT~DOB_WK|DPLURAL,data=births2006.smpl,layout=c(5,1), col="black")
xyplot(DBWT~WTGAIN,data=births2006.smpl,col="black")
xyplot(DBWT~WTGAIN|DPLURAL,data=births2006.smpl,layout=c(5,1), col="black")
smoothScatter(births2006.smpl$WTGAIN,births2006.smpl$DBWT)
boxplot(DBWT~APGAR5,data=births2006.smpl,ylab="DBWT", xlab="AGPAR5")
## Install packages from CRAN; use any USA mirror
##install.packages("nutshell")
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl[1:5,]
boxplot(DBWT~APGAR5,data=births2006.smpl,ylab="DBWT", xlab="AGPAR5")
boxplot(DBWT~DOB_WK,data=births2006.smpl,ylab="DBWT", xlab="Day of Week")
bwplot(DBWT~factor(APGAR5)|factor(SEX),data=births2006.smpl, xlab="AGPAR5")
clear()
clear
cls
cls()
library(lattice)
don <- read.csv("D:\Users\gmohanna\Downloads\contribution.csv")
don <- read.csv("D:\\Users\\gmohanna\\Downloads\\contribution.csv")
View(don)
View(don)
table(don$Class.Year)
barchart(table(don$Class.Year),horizontal=FALSE,
xlab="Class Year",col="black")
View(don)
View(don)
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
mean(don$TGiving)
sd(don$TGiving)
quantile(don$TGiving,probs=seq(0,1,.1))
hist(don$TGiving)
hist(don$TGiving[don$TGiving!=0])
hist(don$TGiving[don$TGiving!=0][don$TGiving[don$TGiving!=0]<=1000])
boxplot(TGiving~Class.Year,data=don,outline=FALSE)
boxplot(TGiving~Gender,data=don,outline=FALSE)
boxplot(TGiving~Marital.Status,data=don,outline=FALSE)
boxplot(TGiving~AttendenceEvent,data=don,outline=FALSE)
t4=tapply(don$TGiving,don$Major,mean,na.rm=TRUE)
t4
t5=table(don$Major)
t5
t5=table(don$Major)
t5
t6=cbind(t4,t5)
View(`t6`)
View(`t6`)
t7=t6[t6[,2]>10,]
View(`t7`)
View(`t7`)
t4=tapply(don$TGiving,don$Major,mean,na.rm=TRUE)
t5=table(don$Major)
t6=cbind(t4,t5)
t7=t6[t6[,2]>10,]
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
t4=tapply(don$TGiving,don$Next.Degree,mean,na.rm=TRUE)
t5=table(don$Next.Degree)
t6=cbind(t4,t5)
t7=t6[t6[,2]>10,]
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
densityplot(~TGiving|factor(Class.Year), data=don[don$TGiving<=1000,][don[don$TGiving<=1000,]$TGiving>0,],plot.points=FALSE,col="black")
t11=tapply(don$TGiving,don$Class.Year,FUN=sum,na.rm=TRUE)
barplot(t11,ylab="Average Donation")
barchart(tapply(don$FY04Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY03Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY02Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY01Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY00Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
package.install("knitr")
install.package("knitr")
install.packages("knitr")
install.packages("kernSmooth")
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
3+3+4
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
debug(ls)
ls
GDP.tmp <- read.csv(file="./SkyDrive/Documents/HW/Coursera/Getting and Cleaning Data/Quizzes/Data/GDP.csv", sep=",", header=F, skip=5, nrow=231, blank.lines.skip=T)
getwd()
## Start by loading the data: http://s3.amazonaws.com/assets.datacamp.com/course/dasi/ames.RData.
## The RData-file contains the data frame ames. After loading the data, have a look at your data frame using the techniques you learned.
# Load the 'ames' data frame:
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/ames.RData"))
area  = ames$Gr.Liv.Area
price = ames$SalePrice
# Calculate the summary and draw a histogram of 'area'
summary(area)
barplot(height=table(area))
barplot(height=hist(area))
hist(area)
samp0 = sample(x=area, size=50)
samp1 = sample(x=area, size=50)
hist(samp0)
hist(samp1)
sample_means50 = rep(NA, 5000)
# Take 5000 samples of size 50 of 'area' and store all of them in
# 'sample_means50'.
for (i in 1:5000) {
samp = sample(area, 50)
sample_means50[i] = mean(samp)
}
# View the result. If you want, you can increase the bin width to show more
# detail by changing the 'breaks' argument.
hist(sample_means50, breaks = 13)
hist(x=sample_means10,xlim=xlimits)
# Initialize the sample distributions:
sample_means10 = rep(NA, 5000)
sample_means100 = rep(NA, 5000)
# Run the for loop:
for (i in 1:5000) {
samp = sample(area, 10)
sample_means10[i] = mean(samp)
samp = sample(area, 100)
sample_means100[i] = mean(samp)
}
# Take a look at the results:
head(sample_means10)
head(sample_means50)  # was already loaded
head(sample_means100)
hist(x=sample_means10,xlim=xlimits)
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(x=sample_means10,xlim=xlimits)
hist(x=sample_means10 ,xlim=xlimits, breaks=20)
hist(x=sample_means50 ,xlim=xlimits, breaks=20)
hist(x=sample_means100,xlim=xlimits, breaks=20)
# Divide the plot in 3 rows:
par(mfrow = c(3, 1))
# Define the limits for the x-axis:
xlimits = range(sample_means10)
# Draw the histograms:
hist(x=sample_means10 ,xlim=xlimits, breaks=20)
hist(x=sample_means50 ,xlim=xlimits, breaks=20)
hist(x=sample_means100,xlim=xlimits, breaks=20)
sample_means50 = rep(NA, 5000)
for(i in 1:5000) {
sample_means50[i] = mean(sample(price, 50))
}
head(sample_means)
head(sample_means50)
sample_means50  = rep(NA, 5000)
sample_means150 = rep(NA, 5000)
for(i in 1:5000) {
sample_means50 [i]  = mean(sample(price,  50))
sample_means150[i] = mean(sample(price, 150))
}
hist(sample_means50)
hist(sample_means150)
par(mfrow = c(2, 1))
hist(sample_means50)
hist(sample_means150)
par(mfrow = c(2, 1))
xlim = rane(c(sample_means50, sample_means150))
hist(sample_means50 , xlimits=xlim)
hist(sample_means150, xlimits=xlim)
par(mfrow = c(2, 1))
xlim = range(c(sample_means50, sample_means150))
hist(sample_means50 , xlimits=xlim)
hist(sample_means150, xlimits=xlim)
par(mfrow = c(2, 1))
xlim = range(c(sample_means50, sample_means150))
hist(sample_means50 , xlim=xlim)
hist(sample_means150, xlim=xlim)
par(mfrow = c(2, 1))
xlim = range(c(sample_means50, sample_means150))
hist(sample_means50 , xlim=xlim)
hist(sample_means150, xlim=xlim)
setwd("D:/Users/gmohanna/SkyDrive/Documents/HW/Coursera/R Programming/Programming Assignments/Peer Assessment")
source("casheMatrix.R")
source("cacheMatrix.R")
print("Creating Vector:")
mtr.count <- 1500
iniMatrix <- matrix(runif(n=mtr.count**2, min=1, max=100), nrow=mtr.count, ncol=mtr.count)
print("Time to Calculate Inverse:")
system.time(solve(iniMatrix))
mtr.count <- 1500
iniMatrix <- matrix(runif(n=mtr.count**2, min=1, max=100), nrow=mtr.count, ncol=mtr.count)
# Calcuate time to solve inverse
print("Time to Calculate Inverse:")
system.time(solve(iniMatrix))
# Create vector using makeCacheMatrix
print("Creating Cached Vector:")
cchMatrix <- makeCacheMatrix(iniMatrix)
# Calcuate time to solve inverse: This should take about 3-4 seconds
print("Calculating Matrix Inverse for 1st Time:")
system.time(cacheSolve(x=cchMatrix))
class(matrix(1))
source("cacheMatrix.R")
mtr.count <- 1500
iniMatrix <- matrix(runif(n=mtr.count**2, min=1, max=100), nrow=mtr.count, ncol=mtr.count)
# Calcuate time to solve inverse
print("Time to Calculate Inverse:")
system.time(solve(iniMatrix))
# Create vector using makeCacheMatrix
print("Creating Cached Vector:")
cchMatrix <- makeCacheMatrix(iniMatrix)
print("Calculat Time to Invert Cached Matrix for 1st Time:")
system.time(cacheSolve(x=cchMatrix))
print("Calculat Time to Invert Cached Matrix for 2nd Time:")
system.time(cacheSolve(x=cchMatrix))
print("Changing Matrix Values:")
cchMatrix$set(matrix(runif(n=mtr.count**2, min=1, max=100), nrow=mtr.count, ncol=mtr.count))
system.time(cacheSolve(x=cchMatrix))
